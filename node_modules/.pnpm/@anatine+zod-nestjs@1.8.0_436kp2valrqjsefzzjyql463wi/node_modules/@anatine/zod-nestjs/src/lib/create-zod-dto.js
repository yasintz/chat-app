"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createZodDto = void 0;
const zod_openapi_1 = require("@anatine/zod-openapi");
const createZodDto = (zodSchema) => {
    class SchemaHolderClass {
        constructor() {
            this.schema = (0, zod_openapi_1.generateSchema)(zodSchema);
        }
        /** Found from METADATA_FACTORY_NAME
         * in Nestjs swagger module.
         * https://github.com/nestjs/swagger/blob/491b168cbff3003191e55ee96e77e69d8c1deb66/lib/type-helpers/mapped-types.utils.ts
         * METADATA_FACTORY_NAME is defined here as '_OPENAPI_METADATA_FACTORY' here:
         * https://github.com/nestjs/swagger/blob/491b168cbff3003191e55ee96e77e69d8c1deb66/lib/plugin/plugin-constants.ts
         */
        static _OPENAPI_METADATA_FACTORY() {
            var _a, _b;
            const generatedSchema = (0, zod_openapi_1.generateSchema)(zodSchema);
            const properties = (_a = generatedSchema.properties) !== null && _a !== void 0 ? _a : {};
            for (const key in properties) {
                /** For some reason the SchemaObject model has everything except for the
                 * required field, which is an array.
                 * The NestJS swagger module requires this to be a boolean representative
                 * of each property.
                 * This logic takes the SchemaObject, and turns the required field from an
                 * array to a boolean.
                 */
                const schemaObject = properties[key];
                const schemaObjectWithRequiredField = Object.assign({}, schemaObject);
                if ((generatedSchema.required !== undefined,
                    (_b = generatedSchema.required) === null || _b === void 0 ? void 0 : _b.includes(key))) {
                    schemaObjectWithRequiredField.required = true;
                }
                else {
                    schemaObjectWithRequiredField.required = false;
                }
                properties[key] = schemaObjectWithRequiredField; // TODO: Fix this
            }
            return properties;
        }
        static create(input) {
            return this.zodSchema.parse(input);
        }
    }
    SchemaHolderClass.zodSchema = zodSchema;
    return SchemaHolderClass;
};
exports.createZodDto = createZodDto;
//# sourceMappingURL=create-zod-dto.js.map